{"version":3,"sources":["components/AddTodo.js","components/TodoItem.js","components/Todo.js","App.js","serviceWorker.js","index.js"],"names":["AddTodo","onSubmit","this","props","handleAdd","className","placeholder","type","value","state","input","onChange","handleChange","Component","TodoItem","from","opacity","marginBottom","to","style","textDecoration","todo","isCompleted","onClick","handleComplete","text","handleDelete","uuid","require","Todo","e","setState","target","preventDefault","todoTwo","JSON","parse","localStorage","getItem","push","id","setItem","stringify","todos","notificationText","newTodos","filter","a","forEach","console","log","map","href","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c5d348d8.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nexport default class AddTodo extends Component {\n  //   constructor(props) {\n  //     super(props);\n  //   }\n  render() {\n    return (\n      <form onSubmit={this.props.handleAdd} className=\"todoForm\">\n        <input\n          placeholder={`what's on your mind?`}\n          type=\"text\"\n          value={this.props.state.input}\n          onChange={this.props.handleChange}\n        ></input>\n        <button className=\"btnAdd\">Add</button>\n      </form>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport { Spring } from \"react-spring/renderprops\";\n\nexport default class TodoItem extends Component {\n  render() {\n    return (\n      <Spring\n        from={{ opacity: 0, marginBottom: -10 }}\n        to={{ opacity: 1, marginBottom: 0 }}\n      >\n        {props => (\n          <div className=\"App\" style={props}>\n            <li\n              className=\"todoItem\"\n              style={{\n                textDecoration: this.props.todo.isCompleted\n                  ? \"line-through\"\n                  : \"none\"\n              }}\n            >\n              <button\n                className=\"btnComp\"\n                onClick={() => {\n                  this.props.handleComplete(this.props.todo);\n                }}\n              >\n                <i className=\"fas fa-check  \"></i>\n              </button>\n\n              <span className=\"todoText\">{this.props.todo.text}</span>\n              <button\n                className=\"btnDel\"\n                onClick={() => {\n                  this.props.handleDelete(this.props.todo);\n                }}\n              >\n                <i className=\"fas fa-trash  \"></i>\n              </button>\n            </li>\n          </div>\n        )}\n      </Spring>\n    );\n  }\n}\n","import React, { Component } from \"react\";\nimport AddTodo from \"./AddTodo\";\nimport TodoItem from \"./TodoItem\";\n// import Notification from \"./Notification\";\nconst uuid = require(\"uuid/v1\");\n\nexport default class Todo extends Component {\n  constructor(props) {\n    super(props);\n\n    // Initial State\n    this.state = {\n      input: \"\",\n      todos: JSON.parse(localStorage.getItem(\"Todos\")) || [\n        { id: uuid(), isCompleted: false, text: \"We are here..\" },\n        { id: uuid(), isCompleted: false, text: \"So you don't feel lonely :)\" }\n      ]\n    };\n  }\n\n  componentDidMount() {\n    // localStorage.setItem(\"Todos\", JSON.stringify(this.state.todos));\n    // const todos = JSON.parse(localStorage.getItem(\"Todos\")) || [];\n    console.log(this.state.todos);\n  }\n\n  // Controll Inputs\n  handleChange = e => {\n    this.setState({\n      input: e.target.value\n    });\n  };\n\n  // Add todos to list\n  handleAdd = e => {\n    e.preventDefault();\n    if (this.state.input) {\n      let todoTwo = JSON.parse(localStorage.getItem(\"Todos\")) || [];\n      todoTwo.push({ id: uuid(), isCompleted: false, text: this.state.input });\n      localStorage.setItem(\"Todos\", JSON.stringify(todoTwo));\n      this.setState({\n        input: \"\",\n        todos: todoTwo,\n        notificationText: \"Todo Added\"\n      });\n    }\n  };\n\n  // Delete Todos\n  handleDelete = value => {\n    let todos = JSON.parse(localStorage.getItem(\"Todos\")) || [];\n    let newTodos = todos.filter(a => a.id !== value.id);\n    localStorage.setItem(\"Todos\", JSON.stringify(newTodos));\n    this.setState({\n      todos: newTodos,\n      notificationText: \"Todo Deleted\"\n    });\n  };\n\n  // Completed Todos\n  handleComplete = value => {\n    let newTodos = JSON.parse(localStorage.getItem(\"Todos\")) || [];\n    newTodos.forEach(e => {\n      if (e.id === value.id) {\n        e.isCompleted = !e.isCompleted;\n      }\n    });\n    localStorage.setItem(\"Todos\", JSON.stringify(newTodos));\n    this.setState({ todos: newTodos, notificationText: \"Todo Completed\" });\n  };\n\n  render() {\n    // Maping through Todos\n    const todo = this.state.todos.map(todo => (\n      <TodoItem\n        todo={todo}\n        state={this.state}\n        handleComplete={this.handleComplete}\n        handleDelete={this.handleDelete}\n      />\n    ));\n\n    return (\n      <div className=\"app\">\n        <h1>TodoList</h1>\n        <small>\n          made with <a href=\"www.reactjs.org\">react</a>\n        </small>\n        <div className=\"todoList\">\n          <p className=\"infoText\">\n            This app doesn't save your todos anywhere, It'll be gone once you\n            close this window.\n          </p>\n          <ul>{todo}</ul>\n        </div>\n        <AddTodo\n          handleChange={this.handleChange}\n          handleAdd={this.handleAdd}\n          state={this.state}\n        />\n\n        <div className=\"footer\">\n          <small>\n            made with <i className=\"fas fa-heart\"></i> by\n            <a href=\"https://www.github.com/muhsin7majeed\"> Muhsin</a>\n          </small>\n        </div>\n        {/* <Notification state={this.state} /> */}\n      </div>\n    );\n  }\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Todo from \"./components/Todo\";\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Todo />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}